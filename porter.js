// Generated by CoffeeScript 1.6.3
(function() {
  var PORT, SECRET, authed, butler, checkPort, checkin, droneName, http, listen, net, portfinder, server, upnode, _ref;

  upnode = require('upnode');

  portfinder = require('portfinder');

  net = require('net');

  http = require('http');

  PORT = 7004;

  SECRET = (_ref = process.env.PORTER_PASS) != null ? _ref : 'o87asdoa87sa';

  butler = {
    host: process.env.BUTLER_HOST,
    port: process.env.BUTLER_PORT,
    secret: process.env.BUTLER_SECRET
  };

  droneName = process.env.DRONE_NAME;

  checkin = function(remote) {
    var connection, opts;
    if (process.env.PORTER_TESTING) {
      return;
    }
    opts = {
      hostname: remote.host,
      port: remote.port,
      path: "/checkin/" + droneName,
      auth: "porter:" + remote.secret
    };
    connection = http.get(opts, function(res) {
      if (res.statusCode !== 200) {
        throw new Error("Checkin failed with status " + res.statusCode);
      }
      console.log("Checked in with " + remote.host + ":" + remote.port);
      return this.socket.end();
    }).on("error", function(e) {
      throw new Error(e);
    });
    return connection.on('socket', function(socket) {
      socket.setTimeout(10 * 1000);
      return socket.on('timeout', function() {
        throw new Error("Checkin timeout");
      });
    });
  };

  listen = function() {
    server.listen(PORT);
    checkin(butler);
    return setInterval(function() {
      return checkin(butler);
    }, 60 * 1000);
  };

  authed = {
    port: function(cb) {
      return portfinder.getPort(function(err, port) {
        portfinder.basePort = port + 1;
        return cb(err, port);
      });
    }
  };

  server = upnode(function(client, conn) {
    return this.auth = function(secret, cb) {
      if (secret === SECRET) {
        return cb(null, authed);
      }
      return cb('DENIED');
    };
  });

  checkPort = function() {
    var tester;
    tester = net.createServer();
    tester.on('error', function(error) {
      console.log("Porter already running?");
      return setTimeout(function() {
        return checkPort();
      }, 10 * 1000);
    });
    return tester.listen(PORT, function() {
      return tester.close(function() {
        return listen();
      });
    });
  };

  checkPort();

  console.log("Server listening on " + PORT);

  module.exports = {
    authed: authed
  };

}).call(this);
