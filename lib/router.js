// Generated by CoffeeScript 1.6.3
(function() {
  var PIDPATH, buildOpts, fs, mu, nginxPath, os, path, writeFile;

  mu = require('mu2');

  path = require('path');

  os = require('os');

  fs = require('fs');

  nginxPath = path.resolve('nginx');

  PIDPATH = '';

  buildOpts = function(routingTable) {
    var data, name, options, route, server, upstream, _i, _len, _ref, _ref1;
    options = {
      worker_processes: os.cpus().length,
      access_log: path.join(nginxPath, 'access.log'),
      error_log: path.join(nginxPath, 'error.log'),
      pidfile: path.join(PIDPATH, 'porternginx.pid')
    };
    for (name in routingTable) {
      data = routingTable[name];
      if (options.server == null) {
        options.server = [];
      }
      server = {
        domain: data.domain,
        name: name
      };
      options.server.push(server);
      if (options.upstream == null) {
        options.upstream = [];
      }
      upstream = {
        name: name,
        method: (_ref = data.method) != null ? _ref : "least_conn",
        routes: []
      };
      _ref1 = data.routes;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        route = _ref1[_i];
        upstream.routes.push({
          host: route.host,
          port: route.port
        });
      }
      options.upstream.push(upstream);
    }
    return options;
  };

  writeFile = function(routingTable, cb) {
    var mustache, options, output;
    options = buildOpts(routingTable);
    mustache = mu.compileAndRender(path.resolve(nginxPath, 'nginx.conf.mustache'), options);
    output = fs.createWriteStream(path.resolve(nginxPath, './nginx.conf'));
    mustache.pipe(output);
    mustache.on('error', function(err) {
      return cb(err);
    });
    output.on('error', function(err) {
      return cb(err);
    });
    return output.on('close', function() {
      return cb(null);
    });
  };

  module.exports = {
    writeFile: writeFile,
    buildOpts: buildOpts,
    setPIDPATH: function(input) {
      return PIDPATH = input;
    }
  };

}).call(this);
