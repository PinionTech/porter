// Generated by CoffeeScript 1.6.3
(function() {
  var NginxConfFile, fs, os, path, writeFile;

  NginxConfFile = require('nginx-conf').NginxConfFile;

  path = require('path');

  os = require('os');

  fs = require('fs');

  writeFile = function(routingTable, cb) {
    var nginxPath;
    nginxPath = path.resolve('nginx');
    return NginxConfFile.create(path.join(nginxPath, 'nginx.conf'), function(err, conf) {
      var configFile, data, name, route, server, template, upstream, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2, _ref3;
      if (err != null) {
        console.error("nginx configuration error", err);
        template = fs.createReadStream(path.join(nginxPath, 'template.nginx.conf'));
        configFile = fs.createWriteStream(path.join(nginxPath, 'nginx.conf'));
        template.pipe(configFile);
        cb(err);
      }
      conf.nginx._remove('worker_processes');
      conf.nginx._add('worker_processes', os.cpus().length);
      conf.nginx._remove('pid');
      conf.nginx._add('pid', path.join(nginxPath, 'nginx.pid'));
      conf.nginx.http._remove('access_log');
      conf.nginx.http._add('access_log', "" + (path.join(nginxPath, 'access.log')) + " main");
      conf.nginx.http._remove('error_log');
      conf.nginx.http._add('error_log', "" + (path.join(nginxPath, 'access.log')) + " debug");
      if (conf.nginx.http.server != null) {
        if (conf.nginx.http.server.length != null) {
          _ref = conf.nginx.http.server;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            server = _ref[_i];
            conf.nginx.http._remove('server');
          }
        } else {
          conf.nginx.http._remove('server');
        }
      }
      if (conf.nginx.http.upstream != null) {
        if (conf.nginx.http.upstream.length != null) {
          _ref1 = conf.nginx.http.server;
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            server = _ref1[_j];
            conf.nginx.http._remove('upstream');
          }
        } else {
          conf.nginx.http._remove('upstream');
        }
      }
      for (name in routingTable) {
        data = routingTable[name];
        conf.nginx.http._add("upstream", name);
        if (conf.nginx.http.upstream.length != null) {
          upstream = conf.nginx.http.upstream[conf.nginx.http.upstream.length - 1];
        } else {
          upstream = conf.nginx.http.upstream;
        }
        upstream._add((_ref2 = data.method) != null ? _ref2 : "least_conn");
        _ref3 = data.routes;
        for (_k = 0, _len2 = _ref3.length; _k < _len2; _k++) {
          route = _ref3[_k];
          upstream._add("server", "" + route.host + ":" + route.port);
        }
        conf.nginx.http._add("server");
        if (conf.nginx.http.server.length != null) {
          server = conf.nginx.http.server[conf.nginx.http.server.length - 1];
        } else {
          server = conf.nginx.http.server;
        }
        server._add("listen", "7005");
        server._add("server_name", data.domain);
        server._add("location", "/");
        server.location._add("proxy_pass", "http://" + name);
      }
      conf.flush();
      return cb(null);
    });
  };

  module.exports = {
    writeFile: writeFile
  };

}).call(this);
